# AoC 2023

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1.5"},
  {:nimble_parsec, "~> 1.4"}
])
```

## Hi there!

This [Livebook](https://livebook.dev/) notebook contains solutions for [Advent of Code 2023](https://adventofcode.com/2023)

<!-- livebook:{"break_markdown":true} -->

[![Run in Livebook](https://livebook.dev/badge/v1/black.svg)](https://livebook.dev/run?url=https%3A%2F%2Fraw.githubusercontent.com%2Fawerment%2Faoc_2023%2Fmain%2Felixir%2Fnotebook.livemd)

<!-- livebook:{"branch_parent_index":0} -->

## Day 01

<!-- livebook:{"attrs":{"assign_to":"input_day_01","day":"1","session_secret":"AOC_SESSION_TOKEN","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, input_day_01} =
  KinoAOC.download_puzzle("2023", "1", System.fetch_env!("LB_AOC_SESSION_TOKEN"))
```

#### Part 1

```elixir
pattern = ~r/\d/

input_day_01
|> String.splitter("\n")
|> Stream.map(fn line ->
  Regex.scan(pattern, line)
  |> List.flatten()
end)
|> Stream.map(&(List.first(&1) <> List.last(&1)))
|> Stream.map(&String.to_integer/1)
|> Enum.sum()
```

#### Part 2

```elixir
pattern = ~r/(?=([\d]|one|two|three|four|five|six|seven|eight|nine))/

words =
  ~w[one two three four five six seven eight nine]
  |> Enum.with_index(1)
  |> Enum.map(fn {word, index} -> {word, to_string(index)} end)
  |> Enum.into(%{})

input_day_01
|> String.splitter("\n")
|> Stream.map(fn line ->
  Regex.scan(pattern, line, capture: :all_but_first)
  |> List.flatten()
  |> Enum.map(&Map.get(words, &1, &1))
end)
|> Stream.map(&(List.first(&1) <> List.last(&1)))
|> Stream.map(&String.to_integer/1)
|> Enum.sum()
```

#### Module

```elixir
defmodule Day01 do
  def part_one(input), do: process(input, &line_digits_part_one/1)
  def part_two(input), do: process(input, &line_digits_part_two/1)

  defp process(input, line_digits_fun) do
    input
    |> String.splitter("\n")
    |> Stream.map(line_digits_fun)
    |> Stream.map(&(List.first(&1) <> List.last(&1)))
    |> Stream.map(&String.to_integer/1)
    |> Enum.sum()
  end

  @pattern ~r/\d/
  defp line_digits_part_one(line) do
    Regex.scan(@pattern, line)
    |> List.flatten()
  end

  @pattern ~r/(?=(\d|one|two|three|four|five|six|seven|eight|nine))/
  @words ~w[one two three four five six seven eight nine]
         |> Enum.with_index(1)
         |> Enum.map(fn {word, digit} -> {word, to_string(digit)} end)
         |> Enum.into(%{})
  defp line_digits_part_two(line) do
    Regex.scan(@pattern, line, capture: :all_but_first)
    |> List.flatten()
    |> Enum.map(&Map.get(@words, &1, &1))
  end
end
```

```elixir
Day01.part_one(input_day_01) |> IO.inspect(label: "Part 1")
Day01.part_two(input_day_01) |> IO.inspect(label: "Part 2")
:ok
```

#### ⚡ With Binary Pattern Matching ⚡

```elixir
defmodule Day01.BinaryPatternMatching do
  def part_one(input), do: run(input, &line_digits_part_one/1)
  def part_two(input), do: run(input, &line_digits_part_two/1)

  defp run(input, digits_fun) do
    input
    |> String.splitter("\n")
    |> Enum.map(digits_fun)
    |> Enum.sum()
  end

  defp line_digits_part_one(line, list \\ []) do
    case line do
      <<digit, rest::binary>> when digit in ?1..?9 ->
        line_digits_part_one(rest, [digit | list])

      <<_not_a_digit, rest::binary>> ->
        line_digits_part_one(rest, list)

      <<>> ->
        return(list)
    end
  end

  defp line_digits_part_two(line, list \\ []) do
    case line do
      <<digit, rest::binary>> when digit in ?1..?9 ->
        line_digits_part_two(rest, [digit | list])

      <<"one", rest::binary>> ->
        line_digits_part_two(<<"e", rest::binary>>, [?1 | list])

      <<"two", rest::binary>> ->
        line_digits_part_two(<<"o", rest::binary>>, [?2 | list])

      <<"three", rest::binary>> ->
        line_digits_part_two(<<"e", rest::binary>>, [?3 | list])

      <<"four", rest::binary>> ->
        line_digits_part_two(rest, [?4 | list])

      <<"five", rest::binary>> ->
        line_digits_part_two(<<"e", rest::binary>>, [?5 | list])

      <<"six", rest::binary>> ->
        line_digits_part_two(rest, [?6 | list])

      <<"seven", rest::binary>> ->
        line_digits_part_two(<<"n", rest::binary>>, [?7 | list])

      <<"eight", rest::binary>> ->
        line_digits_part_two(<<"t", rest::binary>>, [?8 | list])

      <<"nine", rest::binary>> ->
        line_digits_part_two(<<"e", rest::binary>>, [?9 | list])

      <<_not_a_digit, rest::binary>> ->
        line_digits_part_two(rest, list)

      <<>> ->
        return(list)
    end
  end

  defp return(list) do
    <<List.last(list), List.first(list)>>
    |> String.to_integer()
  end
end
```

```elixir
Day01.BinaryPatternMatching.part_one(input_day_01) |> IO.inspect(label: "Part 1")
Day01.BinaryPatternMatching.part_two(input_day_01) |> IO.inspect(label: "Part 2")
:ok
```

<!-- livebook:{"branch_parent_index":0} -->

## Day 02

<!-- livebook:{"attrs":{"assign_to":"input_day_02","day":"2","session_secret":"AOC_SESSION_TOKEN","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, input_day_02} =
  KinoAOC.download_puzzle("2023", "2", System.fetch_env!("LB_AOC_SESSION_TOKEN"))
```

#### Some setup...

```elixir
defmodule Day02.Game do
  defstruct id: nil,
            red: 0,
            green: 0,
            blue: 0
end
```

```elixir
defmodule Day02.Parser do
  import NimbleParsec
  alias Day02.Game

  game_number =
    ignore(string("Game "))
    |> integer(min: 1)

  color =
    choice([
      string("red"),
      string("green"),
      string("blue")
    ])
    |> map({String, :to_atom, []})

  hand =
    integer(min: 1)
    |> ignore(string(" "))
    |> concat(color)
    |> optional(ignore(string(", ")))
    |> times(min: 1, max: 3)
    |> wrap()

  hands =
    hand
    |> map({:color_list, []})
    |> optional(ignore(string("; ")))
    |> repeat()

  game =
    game_number
    |> ignore(string(": "))
    |> concat(wrap(hands))
    |> wrap()
    |> map({:to_game, []})

  games =
    game
    |> optional(ignore(string("\n")))
    |> repeat()

  defparsec(:games, games)

  defp color_list(list) do
    Enum.chunk_every(list, 2)
    |> Enum.map(fn [num, color] -> {color, num} end)
  end

  defp to_game([id, draws]) do
    Enum.reduce(draws, %Game{id: id}, fn
      draw, game ->
        Enum.reduce(draw, game, fn {color, num}, game ->
          Map.update(game, color, num, fn pre -> max(pre, num) end)
        end)
    end)
  end
end
```

```elixir
{:ok, games, _, _, _, _} = Day02.Parser.games(input_day_02)
```

#### Part 1

```elixir
limits = %{red: 12, green: 13, blue: 14}

games
|> Enum.filter(fn game ->
  Enum.all?(limits, fn {color, num} -> Map.fetch!(game, color) <= num end)
end)
|> Enum.map(&Map.fetch!(&1, :id))
|> Enum.sum()
```

#### Part 2

```elixir
games
|> Enum.map(fn game ->
  Map.take(game, [:red, :green, :blue])
  |> Map.values()
  |> Enum.product()
end)
|> Enum.sum()
```

#### Module

```elixir
defmodule Day02 do
  alias Day02.{Game, Parser}

  @limits %{red: 12, green: 13, blue: 14}
  def part_one(input) do
    load(input)
    |> Enum.filter(&Enum.all?(@limits, fn {color, num} -> Map.fetch!(&1, color) <= num end))
    |> Enum.map(fn %Game{id: id} -> id end)
    |> Enum.sum()
  end

  def part_two(input) do
    load(input)
    |> Enum.map(fn %Game{red: red, green: green, blue: blue} -> red * green * blue end)
    |> Enum.sum()
  end

  defp load(input) do
    {:ok, games, _, _, _, _} = Parser.games(input)
    games
  end
end
```

```elixir
Day02.part_one(input_day_02) |> IO.inspect(label: "Part 1")
Day02.part_two(input_day_02) |> IO.inspect(label: "Part 2")
:ok
```
